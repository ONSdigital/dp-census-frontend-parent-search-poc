{"version":3,"sources":["Header.tsx","Result.tsx","OLMapFragment.tsx","Content.tsx","Footer.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/Census2021_whiteback.png"],"names":["Header","props","className","src","alt","censusLogo","React","Component","Resulta","console","log","resultList","this","results","map","singleResult","name","OLMapFragment","state","height","updateDimensions","bind","h","window","innerWidth","innerHeight","setState","addEventListener","Map","target","interactions","defaultInteractions","extend","DragRotateAndZoom","layers","TileLayer","source","XYZSource","url","projection","TileWMSSource","params","controls","DefaultControls","ZoomSlider","MousePosition","ScaleLine","OverviewMap","view","View","center","zoom","removeEventListener","style","width","backgroundColor","Grid","container","item","xs","id","Content","searchString","handleSubmit","e","a","preventDefault","submitForm","submitSuccess","setSearchInput","input","requestOptions","method","headers","body","JSON","stringify","fetch","response","json","demo","role","action","onSubmit","htmlFor","type","autoComplete","value","onChange","ev","Footer","href","rel","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.19f13fe9.chunk.js","sourcesContent":["import React from 'react';\nimport censusLogo from './assets/Census2021_whiteback.png'\nimport './App.css';\n\nexport interface HeaderProps {\n}\n\nexport class Header extends React.Component<HeaderProps, {}> {\n\n    constructor(props: HeaderProps) {\n        super(props);\n    }\n\n    render() {\n        return <header>\n            <div className=\"wrapper\">\n                <div className=\"header col-wrap\">\n                    <div className=\"col\">\n                        <img className=\"logo top-logo\"\n                             src=\"https://cdn.ons.gov.uk/assets/images/ons-logo/v2/ons-logo.svg\"\n                             alt=\"Office for National Statistics\"/>\n                        <img className=\"logo top-logo\" src={censusLogo}\n                             alt=\"Census 2021 logo\"/>\n                    </div>\n                </div>\n            </div>\n            <div className=\"primary-nav print--hide page-title font-size--sm\">\n            </div>\n        </header>\n    }\n}\n","import React from 'react';\nimport './App.css';\n\nexport interface ResultProps {\n    results: searchResult[];\n}\n\nexport interface searchResult {\n    name: string\n}\n\n\nexport class Resulta extends React.Component<ResultProps, {}> {\n\n    constructor(props: ResultProps) {\n        super(props);\n    }\n\n    render() {\n        console.log('hmm 0');\n        const resultList = this.props.results.map(function (singleResult: searchResult) {\n            console.log('hmm 1');\n            return <li>{singleResult.name}</li>;\n        });\n        return <div>\n            <ul>{resultList}</ul>\n        </div>\n    }\n}\n","import Grid from '@material-ui/core/Grid'\n\n// Start Openlayers imports\n// @ts-ignore\nimport {\n    Map,\n    View\n} from 'ol'\nimport {\n    GeoJSON,\n    XYZ\n} from 'ol/format'\nimport {\n    Tile as TileLayer,\n    Vector as VectorLayer\n} from 'ol/layer'\nimport {\n    Vector as VectorSource,\n    OSM as OSMSource,\n    XYZ as XYZSource,\n    TileWMS as TileWMSSource\n} from 'ol/source'\nimport {\n    Select as SelectInteraction,\n    defaults as DefaultInteractions\n} from 'ol/interaction'\nimport {\n    Attribution,\n    ScaleLine,\n    ZoomSlider,\n    Zoom,\n    Rotate,\n    MousePosition,\n    OverviewMap,\n    defaults as DefaultControls\n} from 'ol/control'\nimport {\n    Style,\n    Fill as FillStyle,\n    RegularShape as RegularShapeStyle,\n    Stroke as StrokeStyle\n} from 'ol/style'\n\nimport {\n    Projection,\n    get as getProjection\n} from 'ol/proj'\nimport {defaults as defaultInteractions, DragRotateAndZoom} from 'ol/interaction';\n\n// End Openlayers imports\nimport React from \"react\";\n\nexport interface OLMapFragmentProps {\n}\n\nexport class OLMapFragment extends React.Component<OLMapFragmentProps, {}> {\n    state = {\n        height: \"50%\",\n    };\n    constructor(props: OLMapFragmentProps) {\n        super(props);\n        this.updateDimensions = this.updateDimensions.bind(this)\n    }\n\n    updateDimensions() {\n        const h = window.innerWidth >= 992 ? window.innerHeight : 400\n        this.setState({height: h})\n    }\n\n    componentWillMount() {\n        window.addEventListener('resize', this.updateDimensions)\n        this.updateDimensions()\n    }\n\n    componentDidMount() {\n\n        // Create an Openlayer Map instance with two tile layers\n        const map = new Map({\n            //  Display the map in the div with the id of map\n            target: 'map',\n            interactions: defaultInteractions().extend([\n                new DragRotateAndZoom()\n            ]),\n            layers: [\n                new TileLayer({\n                    source: new XYZSource({\n                        url: 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png',\n                        projection: 'EPSG:3857'\n                    })\n                }),\n                new TileLayer({\n                    source: new TileWMSSource({\n                        url: 'https://ahocevar.com/geoserver/wms',\n                        params: {\n                            layers: 'topp:states',\n                            'TILED': true,\n                        },\n                        projection: 'EPSG:4326'\n                    }),\n                    name: 'USA'\n                }),\n            ],\n            // Add in the following map controls\n            controls: DefaultControls().extend([\n                new ZoomSlider(),\n                new MousePosition(),\n                new ScaleLine(),\n                new OverviewMap()\n            ]),\n            // Render the tile layers in a map view with a Mercator projection\n            view: new View({\n                projection: 'EPSG:3857',\n                center: [0, 0],\n                zoom: 4\n            })\n        })\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions)\n    }\n\n    render() {\n        const style = {\n            width: '100%',\n            height: this.state.height,\n            backgroundColor: '#cccccc',\n        };\n        return (\n            <Grid container>\n                <Grid item xs={12}>\n                    <div id='map' style={style}>\n                    </div>\n                </Grid>\n            </Grid>\n        )\n    }\n}","import React, {FormEvent} from 'react';\nimport {Resulta, ResultProps, searchResult} from \"./Result\";\nimport {OLMapFragment} from './OLMapFragment'\n\n\nimport './App.css';\n\nexport interface ContentProps {\n}\n\nexport class Content extends React.Component<ContentProps, {}> {\n\n    state = {\n        searchString: \"\",\n        results: []\n    };\n\n    constructor(props: ContentProps) {\n        super(props);\n        this.state = {\n            searchString: '',\n            results: []\n        };\n        this.setSearchInput = this.setSearchInput.bind(this);\n    }\n\n    protected setSearchInput(input: string): void {\n        this.setState({searchString: input});\n    }\n\n    protected handleSubmit = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {\n        e.preventDefault();\n\n        const submitSuccess: boolean = await this.submitForm();\n        this.setState({submitSuccess});\n    };\n\n    protected async submitForm(): Promise<boolean> {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                \"query\": {\n                    \"bool\": {\n                        \"must\": {\n                            \"match_all\": {}\n                        },\n                        \"filter\": {\n                            \"geo_shape\": {\n                                \"location\": {\n                                    \"shape\": {\n                                        \"type\": \"polygon\",\n                                        \"coordinates\": [[[-3.232257, 51.507306], [-3.128257, 51.500306], [-3.136840, 51.467705], [-3.2085046, 51.4520104], [-3.232257, 51.507306]]]\n                                    },\n                                    \"relation\": \"within\"\n                                }\n                            }\n                        }\n                    }\n                }\n            })\n        };\n        // TODO remove eleasticsearch request for wrapper API when ready\n        const response = await fetch('http://localhost:9200/test_geolocation/_search?pretty', requestOptions);\n        const data = await response.json();\n        //this.setState(({results: data}));\n        const demo: searchResult = {name: \"Test entry 1\"};\n        this.setState(({results: demo}));\n\n        return true;\n    }\n\n    render() {\n        return <div className=\"wrapper\" role=\"search\">\n            <form className=\"col-wrap search__form\" action=\"/search\" onSubmit={this.handleSubmit}>\n                <label className=\"search__label search-label col col--md-23 col--lg-24\" htmlFor=\"search\">Search name of\n                    geographical area</label>\n                <input type=\"search\"\n                       autoComplete=\"off\"\n                       className=\"search__input search-bar col col--md-21 col--lg-32\"\n                       id=\"search\"\n                       value={this.state.searchString}\n                       onChange={(\n                           ev: React.ChangeEvent<HTMLInputElement>,\n                       ): void => this.setSearchInput(ev.target.value)}></input>\n                <button type=\"submit\" className=\"search__button col--md-3 col--lg-3\" id=\"nav-search-submit\">\n                    <span className=\"visuallyhidden\">Search</span>\n                    <span className=\"icon icon-search--light\"></span>\n                </button>\n            </form>\n            <OLMapFragment/>\n            <Resulta results={this.state.results}/>\n        </div>\n    }\n}\n","import React from 'react';\nimport './App.css';\n\nexport interface FooterProps {\n}\n\nexport class Footer extends React.Component<FooterProps, {}> {\n\n    render() {\n        return <footer className=\"footer\">\n            <img className=\"footer-license__img\" alt=\"OGL\"\n                 src=\"https://cdn.ons.gov.uk/assets/images/logo-ogl-footer.svg\"\n                 width=\"60\"></img>\n            <p className=\"footer-license__text margin-left-sm--0\">\n                All content is available under the <a className=\"icon--hide\"\n                                                      href=\"http://www.nationalarchives.gov.uk/doc/open-government-licence/version/3/\"\n                                                      target=\"_blank\"\n                                                      rel=\"noopener noreferrer\">Open Government Licence v3.0</a> <span\n                className=\"icon icon-external--light-small\"></span>, except where otherwise stated\n            </p>\n        </footer>\n    }\n}\n","import React from 'react';\nimport {Header} from \"./Header\";\nimport {Content} from \"./Content\";\nimport {Footer} from \"./Footer\";\nimport './App.css';\n\nexport interface AppProps {\n}\n\nexport class App extends React.Component<AppProps, {}> {\n\n    constructor(props: AppProps) {\n        super(props);\n    }\n\n    render() {\n        return <div>\n            <Header/>\n            <Content/>\n            <Footer/>\n        </div>\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Census2021_whiteback.3edebd2f.png\";"],"sourceRoot":""}